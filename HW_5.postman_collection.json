{
	"info": {
		"_postman_id": "c685c2f0-daae-4954-b4a9-34ee2a105a1e",
		"name": "HW_5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19193142"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json();\r",
							"let token = respData.token\r",
							"pm.environment.set(\"token\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Galina",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/login",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							" let respData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let request_data = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.expect(respData).to.have.property (\"start_qa_salary\");\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.expect(respData).to.have.property (\"qa_salary_after_6_months\");\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.expect(respData).to.have.property (\"qa_salary_after_12_months\");\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.expect(respData).to.have.property (\"qa_salary_after_1.5_year\");\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.expect(respData).to.have.property (\"qa_salary_after_3.5_years\");\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.expect(respData).to.have.property (\"person\");\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let salary_start = respData.start_qa_salary;\r",
							"let salary = +request_data.salary;\r",
							"pm.test(\"Check qa_salary start\", function () {\r",
							"    pm.expect(salary_start).to.eql(salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let salary_6month = respData.qa_salary_after_6_months;\r",
							"let salary_6 = +request_data.salary;\r",
							"pm.test(\"Check qa_salary after 6\", function () {\r",
							"    pm.expect(salary_6month).to.eql(salary_6*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"let salary_12month = respData.qa_salary_after_12_months;\r",
							"let salary_12 = +request_data.salary;\r",
							"pm.test(\"Check qa_salary after 12\", function () {\r",
							"    pm.expect(salary_12month).to.eql(salary_12*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let salary_1_5year = respData[\"qa_salary_after_1.5_year\"];\r",
							"let salary_1_5 = +request_data.salary;\r",
							"pm.test(\"Check qa_salary after 1.5\", function () {\r",
							"    pm.expect(salary_1_5year).to.eql(salary_1_5*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"let salary_3_5year = respData[\"qa_salary_after_3.5_years\"];\r",
							"let salary_3_5 = +request_data.salary;\r",
							"pm.test(\"Check qa_salary after 1.5\", function () {\r",
							"    pm.expect(salary_3_5year).to.eql(salary_3_5*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let person = respData.person.u_name;\r",
							"let salary_1 = +request_data.salary;\r",
							"pm.test(\"Check first element\", function () {\r",
							"    pm.expect(person[1]).to.eql(salary_1);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"let u_age = respData.person.u_age;\r",
							"let age = +request_data.age;\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(u_age).to.eql(age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let u_salary_5 = respData.person.u_salary_5_years;\r",
							"let salary_5 = +request_data.salary;\r",
							"pm.test(\"Check salary after 5 years\", function () {\r",
							"    pm.expect(u_salary_5).to.eql(salary_5*4.2);\r",
							"});\r",
							"\r",
							"let per = 0;\r",
							"let per_stop = 1;\r",
							"while (per < 1){console.log(respData.person)\r",
							"per +=1};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		},
		{
			"key": "port",
			"value": "",
			"type": "string"
		}
	]
}