{
	"info": {
		"_postman_id": "ce929ec0-4789-4ea0-b875-db67950dc29b",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19193142"
	},
	"item": [
		{
			"name": "Request_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							" let respData = pm.response.json();\r",
							"//Спарсить request\r",
							" let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let check_name = respData.name;\r",
							"let req_name = reqData.name;\r",
							"pm.test(\"Your test name\", function () {\r",
							"   \r",
							"    pm.expect(check_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let check_age = respData.age;\r",
							"let req_age = reqData.age;\r",
							"pm.test(\"Your test age\", function () {\r",
							"   \r",
							"    pm.expect(check_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let check_salary = respData.salary;\r",
							"let req_salary = +reqData.salary; \r",
							"pm.test(\"Your test salary\", function () {\r",
							"\r",
							"    pm.expect(check_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"let family = respData.family;\r",
							"console.log(family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"let respDog = respData.family.pets.dog;\r",
							"pm.expect(respDog).to.have.property (\"name\");\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.expect(respDog).to.have.property (\"age\");\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"let nameDog = respData.family.pets.dog. name;\r",
							"pm.test(\"Dog name\", function () {\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"    pm.expect(nameDog).to.eql('Luky');\r",
							"});\r",
							"\r",
							"let ageDog = respData.family.pets.dog.age;\r",
							"pm.test(\"Dog age\", function () {\r",
							"\r",
							"    pm.expect(ageDog).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Galina&age=28&salary=1000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Galina"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		},
		{
			"key": "port",
			"value": "",
			"type": "string"
		}
	]
}